// Date: 2013-05-12 20:29:15
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX






package mods.dnd91.minecraft.hivecraft.client;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelBiped;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.item.ItemStack;
import net.minecraft.util.MathHelper;

public class BioArmorModel extends ModelBiped
{
  //fields
	int renderModel = 0;
    ModelRenderer helm;
    ModelRenderer chest;
    ModelRenderer rightShoulder;
    ModelRenderer leftShoulder;
    ModelRenderer rightLeg;
    ModelRenderer leftLeg;
    ModelRenderer rightBoot;
    ModelRenderer leftBoot;
  
  public  BioArmorModel(ItemStack itemStack, int armorSlot){
	  this();
	  renderModel = armorSlot;
  }
    
  public BioArmorModel()
  {
    textureWidth = 64;
    textureHeight = 64;
    
      helm = new ModelRenderer(this, 0, 0);
      helm.addBox(-5F, -11F, -7F, 10, 6, 10);
      helm.setRotationPoint(0F, 0F, 0F);
      helm.setTextureSize(64, 64);
      helm.mirror = true;
      setRotation(helm, -0.6806784F, 0F, 0F);
      chest = new ModelRenderer(this, 0, 28);
      chest.addBox(-4F, 0F, -3F, 8, 12, 6);
      chest.setRotationPoint(0F, 0F, 0F);
      chest.setTextureSize(64, 64);
      chest.mirror = true;
      setRotation(chest, 0F, 0F, 0F);
      rightShoulder = new ModelRenderer(this, 40, 16);
      rightShoulder.addBox(-4F, -3F, -3F, 5, 6, 6);
      rightShoulder.setRotationPoint(-5F, 2F, 0F);
      rightShoulder.setTextureSize(64, 64);
      rightShoulder.mirror = true;
      setRotation(rightShoulder, 0F, 0F, 0F);
      leftShoulder = new ModelRenderer(this, 40, 16);
      leftShoulder.addBox(-1F, -3F, -3F, 5, 6, 6);
      leftShoulder.setRotationPoint(5F, 2F, 0F);
      leftShoulder.setTextureSize(64, 64);
      leftShoulder.mirror = true;
      setRotation(leftShoulder, 0F, 0F, 0F);
      rightLeg = new ModelRenderer(this, 0, 16);
      rightLeg.addBox(-2F, 0F, -3F, 4, 6, 6);
      rightLeg.setRotationPoint(-2F, 12F, 0F);
      rightLeg.setTextureSize(64, 64);
      rightLeg.mirror = true;
      setRotation(rightLeg, 0F, 0F, 0F);
      leftLeg = new ModelRenderer(this, 0, 16);
      leftLeg.addBox(-2F, 0F, -3F, 4, 6, 6);
      leftLeg.setRotationPoint(2F, 12F, 0F);
      leftLeg.setTextureSize(64, 64);
      leftLeg.mirror = true;
      setRotation(leftLeg, 0F, 0F, 0F);
      rightBoot = new ModelRenderer(this, 20, 16);
      rightBoot.addBox(-2F, 7F, -3F, 4, 5, 6);
      rightBoot.setRotationPoint(-2F, 12F, 0F);
      rightBoot.setTextureSize(64, 64);
      rightBoot.mirror = true;
      setRotation(rightBoot, 0F, 0F, 0F);
      leftBoot = new ModelRenderer(this, 20, 16);
      leftBoot.addBox(-2F, 7F, -3F, 4, 5, 6);
      leftBoot.setRotationPoint(2F, 12F, 0F);
      leftBoot.setTextureSize(64, 64);
      leftBoot.mirror = true;
      setRotation(leftBoot, 0F, 0F, 0F);
  }
  
  public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
  {
    //super.render(entity, f, f1, f2, f3, f4, f5);
    setRotationAngles(f, f1, f2, f3, f4, f5, entity);
    switch(renderModel){
    case 0:
    helm.render(f5);
    break;
    case 1:
    chest.render(f5);
    rightShoulder.render(f5);
    leftShoulder.render(f5);
    break;
    case 2:
    rightLeg.render(f5);
    leftLeg.render(f5);
    break;
    case 3:
    rightBoot.render(f5);
    leftBoot.render(f5);
    };
  }
  
  private void setRotation(ModelRenderer model, float x, float y, float z)
  {
    model.rotateAngleX = x;
    model.rotateAngleY = y;
    model.rotateAngleZ = z;
  }
  
  @Override
  public void setRotationAngles(float par1, float par2, float par3, float par4, float par5, float par6, Entity par7Entity)
  {
	  float f6;
      float f7;
	    switch(renderModel){
	    case 0:
	    	this.helm.rotateAngleY = par4 / (180F / (float)Math.PI);
	        this.helm.rotateAngleX = par5 / (180F / (float)Math.PI) + -0.6806784F;
	        

	        if (this.isSneak)
	        {
	            this.bipedHead.rotationPointY = 1.0F;
	        }
	        else
	        {
	            this.helm.rotationPointY = 0.0F;
	        }

	    break;
	    case 1:

	        this.rightShoulder.rotateAngleX = MathHelper.cos(par1 * 0.6662F + (float)Math.PI) * 2.0F * par2 * 0.5F;
	        this.leftShoulder.rotateAngleX = MathHelper.cos(par1 * 0.6662F) * 2.0F * par2 * 0.5F;
	        this.rightShoulder.rotateAngleZ = 0.0F;
	        this.leftShoulder.rotateAngleZ = 0.0F;

	        if (this.isRiding)
	        {
	            this.rightShoulder.rotateAngleX += -((float)Math.PI / 5F);
	            this.leftShoulder.rotateAngleX += -((float)Math.PI / 5F);
	        }

	        if (this.heldItemLeft != 0)
	        {
	            this.leftShoulder.rotateAngleX = this.leftShoulder.rotateAngleX * 0.5F - ((float)Math.PI / 10F) * (float)this.heldItemLeft;
	        }

	        if (this.heldItemRight != 0)
	        {
	            this.rightShoulder.rotateAngleX = this.rightShoulder.rotateAngleX * 0.5F - ((float)Math.PI / 10F) * (float)this.heldItemRight;
	        }

	        this.rightShoulder.rotateAngleY = 0.0F;
	        this.leftShoulder.rotateAngleY = 0.0F;

	        if (this.onGround > -9990.0F)
	        {
	            f6 = this.onGround;
	            this.chest.rotateAngleY = MathHelper.sin(MathHelper.sqrt_float(f6) * (float)Math.PI * 2.0F) * 0.2F;
	            this.rightShoulder.rotationPointZ = MathHelper.sin(this.chest.rotateAngleY) * 5.0F;
	            this.rightShoulder.rotationPointX = -MathHelper.cos(this.chest.rotateAngleY) * 5.0F;
	            this.leftShoulder.rotationPointZ = -MathHelper.sin(this.chest.rotateAngleY) * 5.0F;
	            this.leftShoulder.rotationPointX = MathHelper.cos(this.chest.rotateAngleY) * 5.0F;
	            this.rightShoulder.rotateAngleY += this.chest.rotateAngleY;
	            this.leftShoulder.rotateAngleY += this.chest.rotateAngleY;
	            this.leftShoulder.rotateAngleX += this.chest.rotateAngleY;
	            f6 = 1.0F - this.onGround;
	            f6 *= f6;
	            f6 *= f6;
	            f6 = 1.0F - f6;
	            f7 = MathHelper.sin(f6 * (float)Math.PI);
	            float f8 = MathHelper.sin(this.onGround * (float)Math.PI) * -(this.bipedHead.rotateAngleX - 0.7F) * 0.75F;
	            this.rightShoulder.rotateAngleX = (float)((double)this.rightShoulder.rotateAngleX - ((double)f7 * 1.2D + (double)f8));
	            this.rightShoulder.rotateAngleY += this.chest.rotateAngleY * 2.0F;
	            this.rightShoulder.rotateAngleZ = MathHelper.sin(this.onGround * (float)Math.PI) * -0.4F;
	        }

	        if (this.isSneak)
	        {
	            this.chest.rotateAngleX = 0.5F;
	            this.rightShoulder.rotateAngleX += 0.4F;
	            this.leftShoulder.rotateAngleX += 0.4F;
	            this.bipedHead.rotationPointY = 1.0F;
	            this.bipedHeadwear.rotationPointY = 1.0F;
	        }
	        else
	        {
	            this.chest.rotateAngleX = 0.0F;
	            this.bipedHead.rotationPointY = 0.0F;
	        }

	        this.rightShoulder.rotateAngleZ += MathHelper.cos(par3 * 0.09F) * 0.05F + 0.05F;
	        this.leftShoulder.rotateAngleZ -= MathHelper.cos(par3 * 0.09F) * 0.05F + 0.05F;
	        this.rightShoulder.rotateAngleX += MathHelper.sin(par3 * 0.067F) * 0.05F;
	        this.leftShoulder.rotateAngleX -= MathHelper.sin(par3 * 0.067F) * 0.05F;

	        if (this.aimedBow)
	        {
	            f6 = 0.0F;
	            f7 = 0.0F;
	            this.rightShoulder.rotateAngleZ = 0.0F;
	            this.leftShoulder.rotateAngleZ = 0.0F;
	            this.rightShoulder.rotateAngleY = -(0.1F - f6 * 0.6F) + this.bipedHead.rotateAngleY;
	            this.leftShoulder.rotateAngleY = 0.1F - f6 * 0.6F + this.bipedHead.rotateAngleY + 0.4F;
	            this.rightShoulder.rotateAngleX = -((float)Math.PI / 2F) + this.bipedHead.rotateAngleX;
	            this.leftShoulder.rotateAngleX = -((float)Math.PI / 2F) + this.bipedHead.rotateAngleX;
	            this.rightShoulder.rotateAngleX -= f6 * 1.2F - f7 * 0.4F;
	            this.leftShoulder.rotateAngleX -= f6 * 1.2F - f7 * 0.4F;
	            this.rightShoulder.rotateAngleZ += MathHelper.cos(par3 * 0.09F) * 0.05F + 0.05F;
	            this.leftShoulder.rotateAngleZ -= MathHelper.cos(par3 * 0.09F) * 0.05F + 0.05F;
	            this.rightShoulder.rotateAngleX += MathHelper.sin(par3 * 0.067F) * 0.05F;
	            this.leftShoulder.rotateAngleX -= MathHelper.sin(par3 * 0.067F) * 0.05F;
	        }
	    break;
	    case 2:
	        this.rightLeg.rotateAngleX = MathHelper.cos(par1 * 0.6662F) * 1.4F * par2;
	        this.leftShoulder.rotateAngleX = MathHelper.cos(par1 * 0.6662F + (float)Math.PI) * 1.4F * par2;
	        this.rightLeg.rotateAngleY = 0.0F;
	        this.leftShoulder.rotateAngleY = 0.0F;

	        if (this.isRiding)
	        {
	            this.rightLeg.rotateAngleX = -((float)Math.PI * 2F / 5F);
	            this.leftShoulder.rotateAngleX = -((float)Math.PI * 2F / 5F);
	            this.rightLeg.rotateAngleY = ((float)Math.PI / 10F);
	            this.leftShoulder.rotateAngleY = -((float)Math.PI / 10F);
	        }

	        if (this.onGround > -9990.0F)
	        {
	            f6 = this.onGround;
	            this.chest.rotateAngleY = MathHelper.sin(MathHelper.sqrt_float(f6) * (float)Math.PI * 2.0F) * 0.2F;
	        }
	        
	        if (this.isSneak)
	        {
	            this.chest.rotateAngleX = 0.5F;
	            this.rightLeg.rotationPointZ = 4.0F;
	            this.leftShoulder.rotationPointZ = 4.0F;
	            this.rightLeg.rotationPointY = 9.0F;
	            this.leftShoulder.rotationPointY = 9.0F;
	        }
	        else
	        {
	            this.chest.rotateAngleX = 0.0F;
	            this.rightLeg.rotationPointZ = 0.1F;
	            this.leftShoulder.rotationPointZ = 0.1F;
	            this.rightLeg.rotationPointY = 12.0F;
	            this.leftShoulder.rotationPointY = 12.0F;
	        }
	    break;
	    case 3:
	    	this.rightBoot.rotateAngleX = MathHelper.cos(par1 * 0.6662F) * 1.4F * par2;
	        this.leftBoot.rotateAngleX = MathHelper.cos(par1 * 0.6662F + (float)Math.PI) * 1.4F * par2;
	        this.rightBoot.rotateAngleY = 0.0F;
	        this.leftBoot.rotateAngleY = 0.0F;

	        if (this.isRiding)
	        {
	            this.rightBoot.rotateAngleX = -((float)Math.PI * 2F / 5F);
	            this.leftBoot.rotateAngleX = -((float)Math.PI * 2F / 5F);
	            this.rightBoot.rotateAngleY = ((float)Math.PI / 10F);
	            this.leftBoot.rotateAngleY = -((float)Math.PI / 10F);
	        }

	        if (this.onGround > -9990.0F)
	        {
	            f6 = this.onGround;
	            this.chest.rotateAngleY = MathHelper.sin(MathHelper.sqrt_float(f6) * (float)Math.PI * 2.0F) * 0.2F;
	        }
	        
	        if (this.isSneak)
	        {
	            this.chest.rotateAngleX = 0.5F;
	            this.rightBoot.rotationPointZ = 4.0F;
	            this.leftBoot.rotationPointZ = 4.0F;
	            this.rightBoot.rotationPointY = 9.0F;
	            this.leftBoot.rotationPointY = 9.0F;
	        }
	        else
	        {
	            this.chest.rotateAngleX = 0.0F;
	            this.rightBoot.rotationPointZ = 0.1F;
	            this.leftBoot.rotationPointZ = 0.1F;
	            this.rightBoot.rotationPointY = 12.0F;
	            this.leftBoot.rotationPointY = 12.0F;
	        }
	    	break;
	    };
  }

}
