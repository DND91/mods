// Date: 2013-08-28 18:21:24
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX

package mods.dnd91.minecraft.hivecraft.client.models.struct;

import org.lwjgl.opengl.GL11;

import mods.dnd91.minecraft.hivecraft.HiveCraft;
import mods.dnd91.minecraft.hivecraft.structure.bioGrinder.TileEntityGrinder;
import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelBox;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;

public class ModelGrinder extends ModelBase
{
  //fields
    ModelRenderer topPlate;
    ModelRenderer bottomPlate;
    ModelRenderer topMuscleHold;
    ModelRenderer mainMuscle;
    ModelRenderer bottomMuscleHold;
    ModelRenderer topGrind;
    ModelRenderer bottomGrind;
    ModelRenderer frPillar;
    ModelRenderer flPillar;
    ModelRenderer brPillar;
    ModelRenderer blPillar;
  
  public ModelGrinder()
  {
    textureWidth = 128;
    textureHeight = 128;
    
      topPlate = new ModelRenderer(this, 0, 0);
      topPlate.addBox(-8F, -3F, -8F, 16, 3, 16);
      topPlate.setRotationPoint(0F, 11F, 0F);
      topPlate.setTextureSize(128, 128);
      topPlate.mirror = true;
      setRotation(topPlate, 0F, 0F, 0F);
      bottomPlate = new ModelRenderer(this, 0, 64);
      bottomPlate.addBox(-8F, -3F, -8F, 16, 3, 16);
      bottomPlate.setRotationPoint(0F, 24F, 0F);
      bottomPlate.setTextureSize(128, 128);
      bottomPlate.mirror = true;
      setRotation(bottomPlate, 0F, 0F, 0F);
      topMuscleHold = new ModelRenderer(this, 0, 19);
      topMuscleHold.addBox(-3F, 0F, -3F, 6, 1, 6);
      topMuscleHold.setRotationPoint(0F, 11F, 0F);
      topMuscleHold.setTextureSize(128, 128);
      topMuscleHold.mirror = true;
      setRotation(topMuscleHold, 0F, 0F, 0F);
      mainMuscle = new ModelRenderer(this, 0, 26);
      mainMuscle.addBox(-2F, 0F, -2F, 4, 4, 4);
      mainMuscle.setRotationPoint(0F, 12F, 0F);
      mainMuscle.setTextureSize(128, 128);
      mainMuscle.mirror = true;
      setRotation(mainMuscle, 0F, 0F, 0F);
      bottomMuscleHold = new ModelRenderer(this, 0, 34);
      bottomMuscleHold.addBox(-3F, 0F, -3F, 6, 1, 6);
      bottomMuscleHold.setRotationPoint(0F, 16F, 0F);
      bottomMuscleHold.setTextureSize(128, 128);
      bottomMuscleHold.mirror = true;
      setRotation(bottomMuscleHold, 0F, 0F, 0F);
      topGrind = new ModelRenderer(this, 0, 41);
      topGrind.addBox(-5F, 0F, -5F, 10, 2, 10);
      topGrind.setRotationPoint(0F, 17F, 0F);
      topGrind.setTextureSize(128, 128);
      topGrind.mirror = true;
      setRotation(topGrind, 0F, 0F, 0F);
      bottomGrind = new ModelRenderer(this, 0, 53);
      bottomGrind.addBox(-5F, -1F, -5F, 10, 1, 10);
      bottomGrind.setRotationPoint(0F, 21F, 0F);
      bottomGrind.setTextureSize(128, 128);
      bottomGrind.mirror = true;
      setRotation(bottomGrind, 0F, 0F, 0F);
      frPillar = new ModelRenderer(this, 76, 13);
      frPillar.addBox(-3F, -10F, -3F, 3, 10, 3);
      frPillar.setRotationPoint(-5F, 21F, -5F);
      frPillar.setTextureSize(128, 128);
      frPillar.mirror = true;
      setRotation(frPillar, 0F, 0F, 0F);
      flPillar = new ModelRenderer(this, 64, 13);
      flPillar.addBox(0F, -10F, -3F, 3, 10, 3);
      flPillar.setRotationPoint(5F, 21F, -5F);
      flPillar.setTextureSize(128, 128);
      flPillar.mirror = true;
      setRotation(flPillar, 0F, 0F, 0F);
      brPillar = new ModelRenderer(this, 76, 0);
      brPillar.addBox(-3F, -10F, 0F, 3, 10, 3);
      brPillar.setRotationPoint(-5F, 21F, 5F);
      brPillar.setTextureSize(128, 128);
      brPillar.mirror = true;
      setRotation(brPillar, 0F, 0F, 0F);
      blPillar = new ModelRenderer(this, 64, 0);
      blPillar.addBox(0F, -10F, 0F, 3, 10, 3);
      blPillar.setRotationPoint(5F, 21F, 5F);
      blPillar.setTextureSize(128, 128);
      blPillar.mirror = true;
      setRotation(blPillar, 0F, 0F, 0F);
  }
  
  public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
  {
    super.render(entity, f, f1, f2, f3, f4, f5);
    setRotationAngles(entity, f, f1, f2, f3, f4, f5);
    topPlate.render(f5);
    bottomPlate.render(f5);
    topMuscleHold.render(f5);
    mainMuscle.render(f5);
    bottomMuscleHold.render(f5);
    topGrind.render(f5);
    bottomGrind.render(f5);
    frPillar.render(f5);
    flPillar.render(f5);
    brPillar.render(f5);
    blPillar.render(f5);
  }
  
  private void setRotation(ModelRenderer model, float x, float y, float z)
  {
    model.rotateAngleX = x;
    model.rotateAngleY = y;
    model.rotateAngleZ = z;
  }
  
  public void renderModel(TileEntityGrinder te, float f5) {
		int x = te.xCoord;
		int y = te.yCoord;
		int z = te.zCoord;
		
		bottomPlate.render(f5);
		
		if(te.stage > 0){
			float h = (te.stage / 10.0f);
			if(h > 2.0F)
				h = 2.0F;
			float mH = 23.0F - h;
			bottomGrind.setRotationPoint(0F, mH, 0F);
			bottomGrind.render(f5);
		}
		
		if(te.stage > 20){
			float h = ((te.stage-20) / 10.0f);
			if(h >= 1.0F)
				h = 1.0F;
			float mH = h;
			float rH = 1.0F - mH;
			float offsetY = 1.0F - mH;
			offsetY *= 23F*f5/mH;
			
			GL11.glPushMatrix();
			GL11.glScalef(1.0F, mH, 1.0F);			
			GL11.glTranslatef(0.0F, offsetY, 0.0F); //Stretch from bottom

			frPillar.render((float) (f5));
			flPillar.render((float) (f5));
			brPillar.render((float) (f5));
			blPillar.render((float) (f5));
			GL11.glPopMatrix();
		}
		
		if(te.stage > 30){
			float h = ((te.stage-30) / 10.0f);
			float h2 = 1.0F;
			if(h >= 1.0F)
				h = 1.0F;
			else if( h <= (3F/16F)){
				h2 = h / (3F/16F);
				h = 3F/16F;
				
			}
			float mH = h;
			float rH = 1.0F - mH;
			//float offsetY = (rH)/mH;
			float offsetY = 1.0F - mH;
			offsetY *= 16F*f5/mH/2;
			
			float mH2 = h2;
			float rH2 = 1.0F - mH2;
			float offset2 = 1.0F - mH2;
			offset2 *= 4F*f5/mH;
			//System.out.println("WHOOOA! -> " + offsetY);
			//f5 = 0.0625F
			
			GL11.glPushMatrix();
			GL11.glScalef(mH, h2, mH);
			GL11.glTranslatef(-offsetY, offset2, -offsetY); //Place at correct place
			//GL11.glTranslatef(0.0F, f5*rH*8, 0.0F);
			topPlate.render(f5);
			GL11.glPopMatrix();
		}
		
		if(te.stage > 40){
			float h = ((te.stage-40) / 10.0f);
			if(h >= 1.0F)
				h = 1.0F;

			float mH = h;
			float rH = 1.0F - mH;
			float offsetY = 1.0F - mH;
			offsetY *= 11F*f5/mH;
			
			
			GL11.glPushMatrix();
			GL11.glScalef(1.0F, mH, 1.0F);
			GL11.glTranslatef(0.0F, offsetY, 0.0F); //Place at correct place
			topMuscleHold.render(f5);
			GL11.glPopMatrix();
		}
		
		if(50 <= te.stage&& te.stage <= 80){
			float h = ((te.stage-50) / 10.0f);
			if(h >= 1.0F)
				h = 1.0F;

			float mH = h;
			float rH = 1.0F - mH;
			float offsetY = 1.0F - mH;
			offsetY *= 12F*f5/mH;
			
			GL11.glPushMatrix();
			GL11.glScalef(mH, mH, mH);
			GL11.glTranslatef(0.0F, offsetY, 0.0F); //Place at correct place
			//GL11.glTranslatef(0.0F, f5*rH*8, 0.0F);
			mainMuscle.render(f5);
			GL11.glPopMatrix();
		}else if(te.stage > 80 && te.actionType == 0){
			float d = (float) (te.currentTick % (Math.PI*40F));
			float delta =  d;
			delta = (float) (Math.cos(delta*0.05F)*0.2F) + 1.0F;
			GL11.glPushMatrix();
			GL11.glScalef(delta, 1.0F, delta);
			mainMuscle.render(f5);
			GL11.glPopMatrix();
		}
		
		if(60 < te.stage){
			float h = ((te.stage-60) / 10.0f);
			if(h >= 1.0F)
				h = 1.0F;
			float mH = h;
			float rH = 1.0F - mH;
			float offsetY = (rH)/mH;
			//System.out.println("WHOOOA! -> " + offsetY);
			//f5 = 0.0625F
			
			GL11.glPushMatrix();
			GL11.glScalef(mH, mH, mH);
			GL11.glTranslatef(0.0F, offsetY, 0.0F); //Place at correct place
			//GL11.glTranslatef(0.0F, f5*rH*8, 0.0F);
			bottomMuscleHold.render(f5);
			GL11.glPopMatrix();
		}
		
		if(te.stage > 70){
			float h = ((te.stage-70) / 10.0f);
			if(h >= 1.0F)
				h = 1.0F;
			float mH = h;
			float rH = 1.0F - mH;
			float offsetY = (rH)/mH;
			//System.out.println("WHOOOA! -> " + offsetY);
			//f5 = 0.0625F
			
			GL11.glPushMatrix();
			GL11.glScalef(mH, mH, mH);
			GL11.glTranslatef(0.0F, offsetY, 0.0F); //Place at correct place
			//GL11.glTranslatef(0.0F, f5*rH*8, 0.0F);
			topGrind.render(f5);
			GL11.glPopMatrix();
		}
		
		
	}
  
  public void setRotationAngles(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
  {
    super.setRotationAngles(f, f1, f2, f3, f4, f5, entity);
  }

}
